using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{
    /*
     * Complete the 'intervalSelection' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY intervals as parameter.
     *
     * We select the maximum number of intervals so that no point
     * is covered by 3 or more chosen intervals (i.e. at most 2 overlaps).
     */
    public static int intervalSelection(List<List<int>> intervals)
    {
      
        var list = new List<(long start, long end)>(intervals.Count);
        foreach (var it in intervals)
            list.Add((it[0], it[1]));

      
        list.Sort((a, b) =>
        {
            int c = a.start.CompareTo(b.start);
            if (c != 0) return c;
            return a.end.CompareTo(b.end);
        });

       
        var comparer = Comparer<(long end, int id)>.Create((x, y) =>
        {
            int c = x.end.CompareTo(y.end);
            if (c != 0) return c;
            return x.id.CompareTo(y.id);
        });

        var active = new SortedSet<(long end, int id)>(comparer);

        int idCounter = 0;
        int kept = 0;

        foreach (var (start, end) in list)
        {
          
            while (active.Count > 0 && active.Min.end < start)
            {
                active.Remove(active.Min);
            }

            
            active.Add((end, idCounter++));
            kept++;

          
            if (active.Count > 2)
            {
                var toRemove = active.Max;
                active.Remove(toRemove);
                kept--;
            }
        }

        return kept;
    }
}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int s = Convert.ToInt32(Console.ReadLine().Trim());

        for (int sItr = 0; sItr < s; sItr++)
        {
            int n = Convert.ToInt32(Console.ReadLine().Trim());

            List<List<int>> intervals = new List<List<int>>();

            for (int i = 0; i < n; i++)
            {
                intervals.Add(Console.ReadLine().TrimEnd().Split(' ').ToList().Select(intervalsTemp => Convert.ToInt32(intervalsTemp)).ToList());
            }

            int result = Result.intervalSelection(intervals);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
